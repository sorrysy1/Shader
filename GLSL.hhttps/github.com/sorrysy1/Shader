//GLSL中的基本数据类型：
//·float
//·bool
//·int

//基本类型可以组成2、3或4维向量
//·vec{2,3,4} a vector of 2,3,or 4 floats
//·bvec{2,3,4} bool vector
//·ivec{2,3,4} vector of integers

//GLSL还包括2×2、3×3或4×4型矩阵，因为这些矩阵类型在图形处理中很常用：
//·mat2
//·mat3
//·mat4

//此外，还有一组用来实现纹理访问的特殊类型，它们被称为采样器（sampler），在读取纹理值（也称为纹素texel）时用到。下面就是纹理采样用到的数据类型：
//·sampler1D – for 1D textures
//·sampler2D – for 2D textures
//·sampler3D – for 3D textures
//·samplerCube – for cube map textures
//·sampler1DShadow – for shadow maps
//·sampler2DShadow – for shadow maps


//变量修饰符
//修饰符给出了变量的特殊含义，GLSL中有如下修饰符：
//·const – 声明一个编译期常量。
//·attribute– 随不同顶点变化的全局变量，由OpenGL应用程序传给顶点shader。这个修饰符只能用在顶点shader中，在shader中它是一个只读变量。
//·uniform– 随不同图元变化的全局变量（即不能在glBegin/glEnd中设置），由OpenGL应用程序传给shader。这个修饰符能用在顶点和片断shader中，在shader中它是一个只读变量。
//·varying –用于顶点shader和片断shader间传递的插值数据，在顶点shader中可写，在片断shader中只读。

//gl_Position 默认的顶点输出字段  输出的是像素的顶点坐标
//gl_FragColor 默认的片段颜色  输出的是像素的RGBA值 float[0,1]
//他们都在main函数中赋值
void main()  //.vert
{  
    gl_Position =ftransform();  
}  
void main()  //.frag
{  
    gl_FragColor =vec4(0.4,0.4,0.8,1.0);  
}  
//光照属性
struct gl_LightSourceParameters  
{  
    vec4 ambient;  //环境光
    vec4 diffuse;  //漫反射
    vec4 specular;  //高光
    vec4 position;  //光源位置
    vec4 halfVector;  //半向量
    vec3 spotDirection;  //聚光方向
    float spotExponent;  //聚光指数
    float spotCutoff; // (range: [0.0,90.0], 180.0) //聚光圆锥角度
    float spotCosCutoff; // (range: [1.0,0.0],-1.0)  //聚光圆锥cos值
    float constantAttenuation;  
    float linearAttenuation;  
    float quadraticAttenuation;  
}; 
//材质属性
struct gl_MaterialParameters  
{  
    vec4 emission;  //散射光
    vec4 ambient;  //环境光
    vec4 diffuse;  //漫反射
    vec4 specular;  //高光
    float shininess;  //材质反射因子 因子越大反射光强度下降越快 
};  

//漫反射光的强度 = 光源的散射成分（gl_LightSourceParameters.diffuse ）*材质的散射系数（gl_MaterialParameters.diffuse ）* 余弦值（
//cos）
//镜面反射即高光
void main()
{
//像素法矢向量与光源矢向量点积 当小于0时不存在高光
if (NdotL > 0.0)  
{  
    // normalize the half-vector, and then compute the  
    // cosine (dot product) with the normal  
    NdotHV = max(dot(normal, gl_LightSource[0].halfVector.xyz),0.0);  
    specular = gl_FrontMaterial.specular * gl_LightSource[0].specular *  
            pow(NdotHV,gl_FrontMaterial.shininess);  
}  
}




